{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/authentication/login/login.component.ts","./src/app/authentication/login/login.component.html","./src/app/authentication/register/register.component.ts","./src/app/authentication/register/register.component.html","./src/app/classes/bid-event.ts","./src/app/classes/bid.ts","./src/app/classes/logged-in-user.ts","./src/app/classes/new-user.ts","./src/app/classes/product-image.ts","./src/app/classes/product.ts","./src/app/classes/profile-image.ts","./src/app/classes/profile.ts","./src/app/classes/user.ts","./src/app/dashboard/admin/admin.component.ts","./src/app/dashboard/admin/admin.component.html","./src/app/dashboard/admin/user-update-by-admin/user-update-by-admin.component.ts","./src/app/dashboard/admin/user-update-by-admin/user-update-by-admin.component.html","./src/app/dashboard/events/event-create/event-create.component.ts","./src/app/dashboard/events/event-create/event-create.component.html","./src/app/dashboard/events/event-detail/event-detail.component.ts","./src/app/dashboard/events/event-detail/event-detail.component.html","./src/app/dashboard/events/event-list/event-list.component.ts","./src/app/dashboard/events/event-list/event-list.component.html","./src/app/dashboard/page-not-found/page-not-found.component.ts","./src/app/dashboard/profile/profile-image/profile-image.component.ts","./src/app/dashboard/profile/profile-image/profile-image.component.html","./src/app/dashboard/profile/profile-update/profile-update.component.ts","./src/app/dashboard/profile/profile-update/profile-update.component.html","./src/app/dashboard/profile/profile.component.ts","./src/app/dashboard/profile/profile.component.html","./src/app/services/admin-guard.service.ts","./src/app/services/auth-guard.service.ts","./src/app/services/auth-interceptor.ts","./src/app/services/auth.service.ts","./src/app/services/bid.service.ts","./src/app/services/can-auction-guard.service.ts","./src/app/services/event.service.ts","./src/app/services/register.service.ts","./src/app/services/rest-api-server.service.ts","./src/app/services/share-event.service.ts","./src/app/services/share-user.service.ts","./src/app/services/spinner.service.ts","./src/app/services/user.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule, Component } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { RegisterComponent } from '@app/authentication/register/register.component';\nimport { LoginComponent } from '@app/authentication/login/login.component';\nimport { EventListComponent } from '@app/dashboard/events/event-list/event-list.component';\nimport { EventDetailComponent } from '@app/dashboard/events/event-detail/event-detail.component';\nimport { ProfileComponent } from '@app/dashboard/profile/profile.component';\nimport { AuthGuardService } from '@app/services/auth-guard.service';\nimport {PageNotFoundComponent} from '@app/dashboard/page-not-found/page-not-found.component';\nimport { AdminGuardService } from '@app/services/admin-guard.service';\nimport { AdminComponent } from '@app/dashboard/admin/admin.component';\nimport { UserUpdateByAdminComponent } from '@app/dashboard/admin/user-update-by-admin/user-update-by-admin.component';\nimport { EventCreateComponent } from '@app/dashboard/events/event-create/event-create.component';\nimport { CanAuctionGuardService } from '@app/services/can-auction-guard.service';\nimport { ProfileUpdateComponent } from '@app/dashboard/profile/profile-update/profile-update.component';\nimport { ProfileImageComponent } from '@app/dashboard/profile/profile-image/profile-image.component';\n\n\nconst routes: Routes = [\n  {'path':'',redirectTo:'/events',pathMatch:'full'},\n  {'path':'register',component:RegisterComponent},\n  {'path':'login',component:LoginComponent},\n  {'path':'admin',component:AdminComponent,canActivate:[AdminGuardService]},\n  {'path':'profile',component:ProfileComponent,canActivate:[AuthGuardService]},\n  {'path':'profile/image',component:ProfileImageComponent,canActivate:[AuthGuardService]},\n  {'path':'events',component:EventListComponent},\n  {'path':'create-event',component:EventCreateComponent,canActivate:[CanAuctionGuardService]},\n  {'path':'events/:id',component:EventDetailComponent},\n  {'path':'**',component:PageNotFoundComponent}]\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n//all components generated are stored in this array to prevent reimporting of all modules....\n//this array is imported in app.modules.ts\n\nexport const RoutingComponent=[RegisterComponent,\n  LoginComponent,\n  EventListComponent,\n  EventDetailComponent,\n  ProfileComponent,\n  PageNotFoundComponent,\n  AdminComponent,\n  UserUpdateByAdminComponent,\n  EventCreateComponent,\n  ProfileUpdateComponent,\n  ProfileImageComponent\n  ]\n","import { Component,OnInit, OnDestroy } from '@angular/core';\nimport {AuthService} from '@app/services/auth.service';\nimport {Router} from '@angular/router';\nimport {ActivatedRoute} from '@angular/router';\nimport { LoggedInUser } from '@app/classes/logged-in-user';\nimport { BidEvent } from '@app/classes/bid-event';\nimport { EventService } from '@app/services/event.service';\nimport { ShareEventService } from '@app/services/share-event.service';\nimport { ShareUserService } from '@app/services/share-user.service';\nimport { User } from '@app/classes/user';\nimport { SpinnerService } from './services/spinner.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styles: [``]\n})\nexport class AppComponent implements OnInit{\n  public logged_in_user:LoggedInUser;\n  private event_list:BidEvent[]=[];\n  public user:User;\n  spinner_status:Boolean;\n\n  constructor(public router:Router,public route:ActivatedRoute,public authService:AuthService,private eventService:EventService,\n    public shareEvent:ShareEventService,private shareUser:ShareUserService,private spinner:SpinnerService) {\n\n      /* call subscribe to get latest value */\n    this.spinner.get().subscribe(resp=>this.spinner_status=resp);\n   }\n    \n  ngOnInit() {\n    \n//getting all event list from http\n    this.getAllEvents();\n\n    this.authService.getLoggedInUser().subscribe(resp=>{\n      this.logged_in_user=resp;\n    });\n   this.shareUser.getUser().subscribe(resp=>this.user=resp);\n   }\n\n   \n   goToProfile(){\n     this.router.navigate(['profile'])\n   }\n\n   ngDestroy(){\n   }\n   \n   goToEvents(){\n     this.router.navigate(['/events'],{relativeTo:this.route})\n   }\n\n   getAllEvents(){\n  //receiving all events and storing in behavior subject.\n    this.eventService.getEventList().subscribe(resp=>{\n\n      this.spinner.remove();\n      console.log(typeof resp.body.results);\n      console.log(\"received events from http\");\n     this.event_list=resp.body.results;\n     this.shareEvent.setShareEvents(this.event_list);},\n    error=>{\n    alert(error);\n   this.spinner.remove(); \n  });\n    \n  }\n  //new events if any,  are stored in above behavior subject...user needs to click search for this\n  //event to take place\n  refreshEvents(){\n    console.log(\"refreshing.............\");\n    this.getAllEvents();\n\n  }\n\n \n  }\n \n  \n  \n\n","<header>\n<nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n  <a routerLink=\"/events\" class=\"navbar-brand mb-0  h1 active\">GRAB IT</a>\n   <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n    <span class=\"navbar-toggler-icon\"></span>\n  </button>\n <!--if user is currently not logged in-->\n  <div  class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n    <ul class=\"navbar-nav mr-auto\">\n      \n      <ng-container *ngIf=\"!logged_in_user['loginStatus']\">\n      <li class=\"nav-item\" >\n        <a routerLink=\"/login\" class=\"nav-link navbar-brand mb-0 h1 active\">Login</a>  \n    </li>\n      <li class=\"nav-item\" >\n        <a class=\"nav-link navbar-brand mb-0 h1 active\" routerLink=\"/register\">Register</a>\n      </li>\n    </ng-container>\n    <!--if user is logged in -->\n    <ng-container  *ngIf=\"logged_in_user['loginStatus']\">\n\n      <li class=\"nav-item active\" >\n        <span class=\"nav-link navbar-brand mb-0 h1 active\" >Welcome {{user.username}}</span>\n      </li>\n\n      <li class=\"nav-item active\">\n        <a routerLink=\"/profile\" class=\"nav-link navbar-brand mb-0 h1 active\">Profile</a>    \n        </li>\n        <li class=\"nav-item active\">\n          <a routerLink=\"/login\" class=\"nav-link navbar-brand mb-0 h1 active\">Logout</a>    \n      </li>\n\n      <li class=\"nav-item dropdown\" >\n        \n        <a class=\"nav-link navbar-brand mb-0 h1 active dropdown-toggle\" href=\"#\" id=\"dropdown01\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">Menu</a>\n        <div class=\"dropdown-menu bg-dark\" aria-labelledby=\"dropdown01\">\n          <a class=\"nav-link navbar-brand mb-0 h1 active\" routerLink=\"/events\">My Events</a>\n          <a class=\"nav-link navbar-brand mb-0 h1 active\" routerLink=\"/create-event\">Create Event</a>\n          <a class=\"nav-link navbar-brand mb-0 h1 active\" routerLink=\"/events\">Something else here</a>\n        </div>\n      </li>\n\n    </ng-container>\n\n      </ul>\n    \n    <form class=\"form-inline my-2 my-lg-0\">\n\n      <a routerLink=\"/admin\" ><span class=\"nav-link navbar-brand mb-0 h1 active\">Admin</span></a>\n      <span class=\"nav-link navbar-brand mb-0 h1 active\">{{logged_in_user[\"expiration\"]|date:'medium'}}</span>\n      <input class=\"form-control mr-sm-2\" type=\"search\" placeholder=\"search to reload events\" aria-label=\"Search\">\n      <button class=\"btn btn-secondary my-2 my-sm-0\" (click)=\"refreshEvents()\">Search</button>\n      \n      <div class=\"spinner-border text-secondary m-2\" [hidden]=\"!spinner_status\" role=\"status\">\n      \n    </div>\n      \n    </form>\n  </div>\n</nav>\n</header>\n<main role=\"main\">\n  <div class=\"album py-5 bg-light\">\n    <div class=\"container\">  \n      \n     \n\n<router-outlet></router-outlet>\n</div>\n</div>\n</main>\n\n<footer class=\"text-muted\">\n  <div class=\"container\">\n    <p class=\"float-right\">\n      <a href=\"#\">Back to top</a>\n    </p>\n    <p>Album example is &copy; Bootstrap, but please download and customize it for yourself!</p>\n    <p>New to Bootstrap? <a href=\"https://getbootstrap.com/\">Visit the homepage</a> or read our <a href=\"../getting-started/introduction/\">getting started guide</a>.</p>\n  </div>\n</footer>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';    // add this\nimport { FormsModule } from '@angular/forms';    // add this\nimport { AppRoutingModule,RoutingComponent } from './app-routing.module';\nimport { AppComponent } from '@app/app.component';\nimport {JwtModule } from '@auth0/angular-jwt';\n\n/* adding rest-api-server-service here so that it is instantiated before any other service as it wil provide rest-api-server path*/\nimport {RestApiServerService} from '@app/services/rest-api-server.service';\n\n//need to be injected-->add in providers array\nimport { HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { AuthTokenInterceptor } from '@app/services/auth-interceptor';\nimport { SpinnerService } from './services/spinner.service';\n\n@NgModule({\n  declarations: [//all the modules the application has\n    AppComponent,\n    RoutingComponent,\n  \n    \n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule, HttpClientModule,\n    JwtModule.forRoot({\n      config: {\n      },\n    }),\n  ],\n  providers: [\n    RestApiServerService,\n    SpinnerService,\n    {\n      provide: HTTP_INTERCEPTORS,\n      useClass: AuthTokenInterceptor,\n      multi: true\n    },\n    \n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport {AuthService} from '@app/services/auth.service';\nimport {Router} from '@angular/router';\nimport {ActivatedRoute} from '@angular/router';\nimport { User } from '@app/classes/user';\nimport { ShareUserService } from '@app/services/share-user.service';\nimport { Profile } from '@app/classes/profile';\nimport { UserService } from '@app/services/user.service';\nimport { SpinnerService } from '@app/services/spinner.service';\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styles: [``]\n})\nexport class LoginComponent implements OnInit {\n\n  //to store username and password of user while login\n public LoginUser;\n //represents current logged in user-->null if no one\n public username:string;;\n //represents if anyone is logged in?\n  public loginStatus:boolean=false;\n\n\n  constructor(private authService: AuthService,public router:Router,public route:ActivatedRoute,\n    private shareUser:ShareUserService,private userService:UserService,private spinner:SpinnerService) {\n   }\n  \n  ngOnInit() {\n    this.authService.getLoggedInUser().subscribe(resp=>{\n      this.loginStatus=resp[\"loginStatus\"];\n      \n    });\n    \n    if(!this.loginStatus){\n    this.LoginUser = {\n      username: null,\n      password: null\n    };\n  \n  }\n  //getting user details from 'user' behavior subject-->returns null if no one------\n  this.shareUser.getUser().subscribe(resp=>this.username=resp[\"username\"]);\n  \n  }\n\n  //ngDestroy() to prevent memory leak due to Behaviour subject\n  \n  login() {\n    console.log(\"login()\")\n    this.authService.login({'username': this.LoginUser.username, 'password': this.LoginUser.password}).subscribe(\n    //clearing out session storage\n    \n      resp=>{\n        this.spinner.remove();\n        this.LoginUser = {//extra protection\n          username: null,\n          password: null\n        };\n        sessionStorage.clear();//extra protection\n        //storing access token received in session storage\n        sessionStorage.setItem('token',resp.body[\"access\"]);\n\n      this.authService.updateData();\n      //getting user profile after login---\n      this.getUserFromHttp();\n      //getting user profile image from amazon aws\n      this.getProfileImage();\n\n    },\n      error=>{\n        this.spinner.remove();\n      alert(error);\n      \n     \n      });\n  \n     //alert user about status\n    if(this.loginStatus){\n        alert(\"logged in successfully!!!!\");\n            }\n      \n      \n    }\n \n  \n \n  logout() {\n    this.authService.logout();\n    alert(\"logged out successfully!!!!!\");\n    //setting null value in 'user' behavior subject after logout\n    this.shareUser.setUser(new User(new Profile()))//update behavior subject containing user\n    this.router.navigate(['../events'],{relativeTo:this.route});\n  }\n \n\n\n  goToRegister(){\nthis.router.navigate(['../register'],{relativeTo:this.route})\n  }\n  goToProfile(){\n    this.router.navigate(['../profile'],{relativeTo:this.route})\n  }\n\n\n  getUserFromHttp(){\n    this.authService.getUser().subscribe(resp=>\n    {let user:User=resp.body;\n      //setting new user received in behavior subject 'user'\n      this.shareUser.setUser(user);\n      this.spinner.remove();},\n      error=>{\n        this.spinner.remove();\n      alert(\"unable to get profile\");\n      });\n  }\n\n\n  /* get profile image */\n\n  getProfileImage(){\n\n    this.userService.getProfileImage().subscribe(resp=>{\n      this.spinner.remove();\n      this.shareUser.setProfileImage(resp.body);\n      },error=>\n      {this.spinner.remove();\n        alert(error);\n      });\n  }\n}\n","    <div class=\"container\">\n    <div class=\"container-fluid\">\n<!--if no user is cuurently logged in-->\n    <div *ngIf=\"!loginStatus\">\n\n      <h2>Log In</h2>\n      <hr>\n      <form #loginform=\"ngForm\" (ngSubmit)=\"login()\">\n        <div class=\"form-group\">\n        <label for=\"username_id\">Username:</label>\n        <input type=\"text\" name=\"login-username\" required  #login_uname=\"ngModel\" id=\"username_id\" class=\"form-control\" [(ngModel)]=\"LoginUser.username\">\n        <div *ngIf=\"login_uname.touched && login_uname.errors\" class=\"text-danger\">Username is required</div>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"password_id\">Password:</label>\n        <input type=\"password\" name=\"login-password\" required  #login_pass=\"ngModel\" id=\"password_id\" class=\"form-control\" [(ngModel)]=\"LoginUser.password\">\n        <div *ngIf=\"login_pass.touched && login_pass.errors\" class=\"text-danger\">Password is required</div>\n\n      </div>\n    \n        <button [disabled]=\"loginform.form.invalid\" type=\"submit\" class=\"btn btn-primary\">Log In</button>\n      </form>\n    \n     <!-----------------Register ->if no one is currently logged in---------------->\n     <hr>\n     \n     <button class=\"btn btn-primary\" (click)=\"goToRegister()\">Register</button>\n  \n    </div>\n    <!--if user is currently logged in -->\n    <div class=\"container-fluid\" *ngIf=\"loginStatus\" >\n      <div class=\"container\"><h2>You are logged in as {{username}} </h2><br />\n        <!--Token Expires: {{ authService.token_expires }}<br />-->\n        <button (click)=\"logout()\" class=\"btn btn-primary\">Log Out</button>\n        <button (click)=\"goToProfile()\" class=\"btn btn-primary\">View Profile</button>      \n      </div>\n    </div>\n    </div>\n  </div>","import { Component, OnInit } from '@angular/core';\nimport { Profile } from '@app/classes/profile';\nimport { RegisterService } from '@app/services/register.service';\nimport {Router} from '@angular/router';\nimport {ActivatedRoute} from '@angular/router';\nimport { AuthService } from '@app/services/auth.service';\nimport { NewUser } from '@app/classes/new-user';\nimport { SpinnerService } from '@app/services/spinner.service';\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styles: [``]\n})\nexport class RegisterComponent implements OnInit {\n//store registered user\n  user:NewUser;\n  constructor(private authService:AuthService,private registerService:RegisterService,private router:Router,private route:ActivatedRoute,\n    private spinner:SpinnerService) {\n   }\n\n  ngOnInit(): void {\n//initialising with default null values-->see constructor of user \n    this.user=new NewUser(new Profile());\n                 \n    \n  }\n\nonSubmit(){\n  this.registerService.registerUser(this.user).subscribe(resp=>\n  {this.spinner.remove();\n    if(resp.status==201){\n      //if user is created\n      alert(\"you have registered successfully\");\n  this.router.navigate(['../login',],{relativeTo:this.route});}\n  },\n  error=>{this.spinner.remove();\n   alert(error)});\n}\n}","<div class=\"container\">\n    <div class=\"container-fluid\">\n    \n    <h1>Register form</h1>\n    <hr>\n   \n    \n  <form #register=\"ngForm\" (ngSubmit)=\"onSubmit()\" novalidate>\n  \n    <!--form is valid ?{{register.form.valid}}//to check form is valid-->\n    \n  <div class=\"form-group\">\n    <label for=\"uname_id\">UserName</label>\n      <input type=\"text\" id=\"uname_id\" name=\"username\" class=\"form-control\" required  pattern=\"\\S{3,30}\" minlength=\"3\" maxlength=\"30\" [(ngModel)]=\"user.username\" #uname=\"ngModel\" [class.is-invalid]=\"uname.touched && uname.invalid\">\n    <div *ngIf=\"uname.errors && uname.touched\">\n      <small class=\"text-danger\" *ngIf=\"uname.errors.required\">Username is required</small>\n      <small class=\"text-danger\" *ngIf=\"uname.errors.maxlength\">Username should be of max 30 chars</small>\n      <small class=\"text-danger\" *ngIf=\"uname.errors.minlength\">Username should be of min 3 chars</small>\n      <small class=\"text-danger\" *ngIf=\"uname.errors.pattern && (!uname.errors.maxlength && !uname.errors.minlength) \">No whitespaces</small>\n\n    </div>\n    </div>\n  \n  <div class=\"form-group\">\n    <label for=\"email_id\">Email</label>\n    <input type=\"email\" name=\"email\" [(ngModel)]=\"user.email\"  required maxlength=\"50\" pattern=\"\\S{1,40}@gmail\\.com$\" id=\"email_id\" class=\"form-control\" #email=\"ngModel\" [class.is-invalid]=\"email.touched && email.invalid\">\n    <div *ngIf=\"email.errors && email.touched\">\n      <small class=\"text-danger\" *ngIf=\"email.errors.required\">Email is required</small>\n      <small class=\"text-danger\" *ngIf=\"email.errors.maxlength\">Email should be of max 50 chars</small>\n      <small class=\"text-danger\" *ngIf=\"email.errors.pattern && (!email.errors.maxlength) \">Email should end with '@gmail.com' and should not contain white spaces</small>\n\n    </div>\n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"pass_id\">Password</label>\n    <input type=\"password\" name=\"password\" [(ngModel)]=\"user.password\"  pattern=\"\\S{8,30}\" required minlength=\"8\" maxlength=\"30\" id=\"pass_id\" class=\"form-control\" #pass=\"ngModel\" [class.is-invalid]=\"pass.touched && pass.invalid\">\n    <div *ngIf=\"pass.errors && pass.touched\">\n      <small class=\"text-danger\" *ngIf=\"pass.errors.minlength\">Password should be of min 8 chars</small>\n      <small class=\"text-danger\" *ngIf=\"pass.errors.required\">Password is required</small> \n      <small class=\"text-danger\" *ngIf=\"pass.errors.maxlength\">Password should be of max 30 chars</small>\n      <small class=\"text-danger\" *ngIf=\"pass.errors.pattern && (!pass.errors.maxlength && !pass.errors.minlength) \">No whitespaces</small>\n    </div>\n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"conf_pass_id\">Confirm Password</label>\n    <input type=\"password\" name=\"conf_pass\" id=\"conf_pass_id\" #conf_pass=\"ngModel\" class=\"form-control\" [(ngModel)]=\"user.confirm_password\" required>\n    <div *ngIf=\"pass.touched && !pass.errors\">\n      <small class=\"text-danger\" *ngIf=\"pass.value!=conf_pass.value\">Both passwords should be same</small>\n    </div>\n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"fname_id\">FirstName</label>\n    <input type=\"text\" name=\"first_name\" [(ngModel)]=\"user.first_name\"  minlength=\"3\" maxlength=\"30\" pattern=\"\\S{3,30}\"  required id=\"fname_id\" class=\"form-control\" #fname=\"ngModel\" [class.is-invalid]=\"fname.touched && fname.invalid\">\n    <div *ngIf=\"fname.errors && fname.touched\">\n      <small class=\"text-danger\" *ngIf=\"fname.errors.required\">FirstName is required</small>\n      <small class=\"text-danger\" *ngIf=\"fname.errors.minlength\">FirstName should be of min 3 chars</small>\n      <small class=\"text-danger\" *ngIf=\"fname.errors.maxlength\">FirstName should be of max 30 chars</small>\n      <small class=\"text-danger\" *ngIf=\"fname.errors.pattern && (!fname.errors.maxlength && !fname.errors.minlength) \"> No Whitespaces</small>\n\n    </div>\n  \n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"lname_id\">LastName</label>\n    <input type=\"text\" name=\"last_name\" [(ngModel)]=\"user.last_name\"  required minlength=\"3\" maxlength=\"30\" pattern=\"\\S{3,30}\" id=\"lname_id\" class=\"form-control\" #lname=\"ngModel\" [class.is-invalid]=\"lname.touched && lname.invalid\">\n    <div *ngIf=\"lname.errors && lname.touched\">\n      <small class=\"text-danger\" *ngIf=\"lname.errors.required\">LastName is required</small>\n      <small class=\"text-danger\" *ngIf=\"lname.errors.minlength\">LastName should be of min 3 chars</small>\n      <small class=\"text-danger\" *ngIf=\"lname.errors.maxlength\">LastName should be of max 30 chars</small>\n      <small class=\"text-danger\" *ngIf=\"lname.errors.pattern && (!lname.errors.maxlength && !lname.errors.minlength) \">No Whitespaces</small>\n\n    </div>\n  \n  </div>\n\n  <div ngModelGroup=\"profile\">\n  <div class=\"form-group\">\n    <label for=\"addr_id\">Address</label>\n    <input type=\"text\" class=\"form-control\" id=\"addr_id\" name=\"address\" [(ngModel)]=\"user.profile.address\" required  minlength=\"10\" maxlength=\"100\" #addr=\"ngModel\" [class.is-invalid]=\"addr.touched && addr.invalid\"> \n    <div *ngIf=\"addr.errors && addr.touched\">\n      <small class=\"text-danger\" *ngIf=\"addr.errors.required\">Address is required</small>\n      <small class=\"text-danger\" *ngIf=\"addr.errors.minlength\">Address should be of min 10 chars</small>\n      <small class=\"text-danger\" *ngIf=\"addr.errors.maxlength\">Address should be of max 100 chars</small>\n    </div>\n  \n  </div>\n  \n  <div class=\"form-group\">\n    <label for=\"pin_id\">Pincode</label>\n    <input type=\"text\" class=\"form-control\" id=\"pin_id\" pattern=\"^[1-9][0-9]{5}$\" name=\"pincode\" [(ngModel)]=\"user.profile.pincode\" required #pin=\"ngModel\" [class.is-invalid]=\"pin.touched && pin.invalid\">\n  <div *ngIf=\"pin.errors && pin.touched\">\n    <small class=\"text-danger\" *ngIf=\"pin.errors.required\">Pincode is required</small>\n    <small class=\"text-danger\" *ngIf=\"pin.errors.pattern\">Pincode must be of six digits starting with [1-9]</small>\n  \n  </div>\n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"contact_id\">Contact No</label>\n    <input type=\"text\" class=\"form-control\" id=\"contact_id\" name=\"contact_no\" [(ngModel)]=\"user.profile.contact_no\" required pattern=\"^[1-9][0-9]{9}$\" #phone=\"ngModel\" [class.is-invalid]=\"phone.touched && phone.invalid\"> \n    <div *ngIf=\"phone.errors && phone.touched\">\n      <small class=\"text-danger\" *ngIf=\"phone.errors.required\">Contact No is required</small>\n      <small class=\"text-danger\" *ngIf=\"phone.errors.pattern\">Contact No must be of ten digits starting with [1-9]</small>\n    \n    </div>\n  \n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"bio_id\">Bio</label>\n    <input type=\"text\" class=\"form-control\" id=\"bio_id\" name=\"bio\" [(ngModel)]=\"user.profile.bio\" maxlength=\"100\" #bio=\"ngModel\" [class.is-invalid]=\"bio.touched && bio.invalid\"> \n    <div *ngIf=\"bio.errors && bio.touched\">\n      <small class=\"text-danger\" *ngIf=\"bio.errors.maxlength\"> Bio should be of max 100 chars</small>\n    \n    </div>\n  \n  </div>\n\n  </div>\n  \n  <!--disable button if frm is invalid or password and conf. password value doesn't match-->\n  <button [disabled]=\"register.form.invalid || pass.value!=conf_pass.value\" class=\"btn btn-primary\" type=\"submit\" >Submit</button>\n  \n  \n  </form>\n  \n  </div>\n  \n</div>","import { Product } from './product';\nimport { ProductImage } from './product-image';\n\nexport class BidEvent {\n            public product:Product;\n            public product_image:ProductImage;\n            public id:number;\n            public date_added:Date;\n            public start_date:Date;\n            public deadline:Date;\n            public base_price:number;\n            public current_date?:Date;\n    constructor(\n            product:Product,\n            product_image:ProductImage,\n            id:number=null,\n            date_added:Date=null,\n            start_date:Date=null,\n            deadline:Date=null,\n            base_price:number=null,\n            current_date?:Date\n               ){\n                   this.product=product;\n                   this.product_image=product_image;\n                   this.id=id;\n                   this.date_added=date_added;\n                   this.start_date=start_date;\n                   this.deadline=deadline;\n                   this.base_price=base_price;\n                   this.current_date=current_date;\n               }\n               \n}\n","export class Bid {\n    bid_price:number;\n    current_datetime:Date;\n    constructor(bid_price:number=null,current_datetime:Date=null){\nthis.bid_price=bid_price;\nthis.current_datetime=current_datetime;\n    }\n}\n","//represents current logged in user-->expiration,user_id and is_staff are present in JSON web token payload\nexport class LoggedInUser {\n        public user_id:number=null;\n        public is_staff:boolean=false;\n        public expiration:Date=null;\n        public loginStatus:boolean=false;\n    \n    \n        \n    }\n      \n\n\n","import { Profile } from './profile';\n\nexport class NewUser {\n      \n    public username:string;\n    public first_name:string;\n    public password:string;\n    public last_name:string;\n    public email:string;\n    public profile:Profile;\n    public confirm_password?:string;\nconstructor(\n    profile:Profile,\n    username:string=null,\n    first_name:string=null,\n    password:string=null,\n    last_name:string=null,\n    email:string=null,\n    confirm_password?:string\n     ){\n\n        this.username=username;\n        this.first_name=first_name;\n        this.password=password;\n        this.last_name=last_name;\n        this.email=email;\n        this.profile=profile;\n        this.confirm_password=confirm_password;\n     }\n\n}\n","export class ProductImage {\r\n\r\n    uploaded_at:Date=null;\r\n    image:string=null;\r\n\r\n}","export class Product {\n\n                public name:string;\n               public category:string;\n               public description:string;\n\n    constructor(name:string=null,\n                category:string=null,\n               description:string=null,\n               ){\n\n                this.category=category;\n                this.description=description;\n                this.name=name;\n               }\n}\n","export class ProfileImage {\n\n    uploaded_at:Date=null;\n    image:string=null;\n\n}\n","\nexport class Profile {\n    public bio:string;\n    public contact_no:string;\n    public address:string;\n    public pincode:string;\n    public is_auctioneer:boolean;\n    public is_bidder:boolean;\n    constructor(bio:string=null,\n        contact_no:string=null,\n        address:string=null,\n        pincode:string=null,\n        is_auctioneer:boolean=false,\n        is_bidder:boolean=false)  \n    {\n        this.bio=bio;\n        this.contact_no=contact_no;\n        this.address=address;\n        this.pincode=pincode;\n        this.is_auctioneer=is_auctioneer;\n        this.is_bidder=is_bidder;\n\n    }\n}\n","import { Profile } from './profile';\n\nexport class User {\n                \n                public username:string;\n                public first_name:string;\n                public last_name:string;\n                public email:string;\n                public profile:Profile;\n    constructor(\n                profile:Profile,\n                username:string=null,\n                first_name:string=null,\n                last_name:string=null,\n                email:string=null,\n                 ){\n\n                    this.username=username;\n                    this.first_name=first_name;\n                    this.last_name=last_name;\n                    this.email=email;\n                    this.profile=profile;\n                 }\n\n              \n}\n","import { Component, OnInit } from '@angular/core';\nimport { User } from '@app/classes/user';\nimport { Profile } from '@app/classes/profile';\nimport { ShareUserService } from '@app/services/share-user.service';\nimport { UserService } from '@app/services/user.service';\nimport { SpinnerService } from '@app/services/spinner.service';\n\n@Component({\n  selector: 'app-admin',\n  templateUrl: './admin.component.html',\n  styles:[`\n  `]\n})\nexport class AdminComponent implements OnInit {\n  //show user details table?\npublic showTable:boolean=false;\n//show user update table?\npublic updateTable=false;\npublic username:string=null;\npublic user:User;\npublic error:string;\npublic is_staff:boolean=false;\n  constructor(private userService:UserService,private shareUser:ShareUserService,private spinner:SpinnerService) {\n    this.user=new User(new Profile());\n   }\n\n  ngOnInit(): void {\n  \n  }\n\n  onSearch(){\n    this.updateTable=false;\n    //getting user from http request\n    this.userService.getUserByUsername(this.username).subscribe(resp=>{\n      this.spinner.remove();\n      this.user=resp.body\n    this.showTable=true;//table is displayed on successfully receiving user\n    \n  },error=>{\n    this.spinner.remove();\n    this.error=error;\n    alert(error);})\n  }\n\n\nonClickUpdateUser(){\n  alert(\"are you sure!!!\");\n  this.updateTable=true;//update table is shown\n  this.showTable=false;//show table is hidden\n\n}\n\n\ndeleteUser(){\n  let answer=confirm(\"are you sure want to delete the user\");//:))\n  if(answer){\n  this.userService.deleteUserByAdmin(this.username).subscribe(resp=>{\n    this.spinner.remove();\n    if(resp.status==204){\n      alert(\"user deleted\");\n    }\n  },error=>{\n    this.spinner.remove();\n    console.log(error);\n  alert(\"error:\"+error);})\n\n}}\n\n//admin cannot delete himself--hard coding\nisAdmin(){\n  if(this.user.username===\"sunilpie\")\n  return true;\n  else\n  return false;\n}\n}\n","<div class=\"container\">\n\n    <div class=\"container-fluid\">\n        <div class=\"col mb-4\">\n            <div class=\"card text-white bg-dark mb-3\">\n              <!--search user by admin with 'username' field-->\n              <div class=\"card-body\">\n                <h5 class=\"card-title\">Search User</h5>\n                <div  class=\"card-text\">\n                    <form #searchUser=\"ngForm\" (ngSubmit)=\"onSearch()\">\n                        <div class=\"form-group\">\n                            <label for=\"username_id\">Username:</label>\n                            <input type=\"text\"  name=\"user\" pattern=\"^\\S{3,30}$\"  #uname=\"ngModel\"  required [(ngModel)]=\"username\" id=\"username_id\" class=\"form-control\" >\n                            <div *ngIf=\"uname.touched && uname.errors\">\n                            <small class=\"text-danger\" *ngIf=\"uname.errors.required\">Username is required</small>\n                            <small class=\"text-danger\" *ngIf=\"uname.errors.maxlength\">Username should be of max 30 chars</small>\n                            <small class=\"text-danger\" *ngIf=\"uname.errors.minlength\">Username should be of min 3 chars</small>\n                            <small class=\"text-danger\" *ngIf=\"uname.errors.pattern && (!uname.errors.maxlength && !uname.errors.minlength) \">No whitespaces</small>\n                          </div>\n                          </div>\n                        <button type=\"submit\" [disabled]=\"uname.errors\" class=\"btn btn-primary\">Search</button>\n                    </form>\n                </div>\n                \n                \n                \n              </div>\n            </div>\n    \n          </div>\n        <!--show user profile   showed only when admin clicks on search user-->\n        <ng-container  *ngIf=\"showTable\">\n          \n          <div class=\"row row-cols-1 row-cols-md-2\">\n            <div class=\"col mb-4\">\n              <div class=\"card text-white bg-dark mb-3\">\n\n                \n                <div class=\"card-body\">\n                  <h5 class=\"card-title\">{{user.first_name+\" \"+user.last_name|titlecase}}</h5>\n                  <p class=\"card-text\">This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>\n                  <p class=\"card-text\">{{user.profile.bio| titlecase}}</p>    \n                  <p class=\"card-text\">\n                    \n                    <button class=\"btn btn-primary\" (click)=\"onClickUpdateUser()\">Update User</button>\n                  </p>\n                  <p class=\"card-text\">\n                    <ng-container *ngIf=\"!isAdmin()\">\n                    <button class=\"btn btn-primary\" (click)=\"deleteUser()\">Delete User</button>\n                  </ng-container>\n                  </p>\n              </div>\n\n              </div>\n            </div>\n          <!--Show user table-->\n          <div class=\"col mb-4\">\n            <div class=\"card text-white bg-dark mb-3\">\n            <table class=\"table table-hover table-dark \">\n              <thead>\n                <tr>\n                  <th scope=\"col\">User Details:</th>\n                \n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <th scope=\"row\">Username</th>\n                  <td>{{user.username}}</td>\n                  \n                </tr>\n                \n                <tr>\n                  <th scope=\"row\">Email</th>\n                  <td>{{user.email}}</td>\n                  \n                </tr>\n                <tr>\n                    <th scope=\"row\">First Name</th>\n                    <td>{{user.first_name}}</td>\n                    \n                  </tr>\n                  <tr>\n                    <th scope=\"row\">Last Name</th>\n                    <td>{{user.last_name}}</td>\n                    \n                  </tr>\n\n                <tr>\n                  <th scope=\"row\">Contact No</th>\n                  <td>{{user.profile.contact_no}}</td>\n                  \n                </tr>\n                <tr>\n                  <th scope=\"row\">Address</th>\n                  <td>{{user.profile.address}}</td>\n                  \n                </tr>\n               \n                <tr>\n                  <th scope=\"row\">Auctioneer</th>\n                  <td>{{user.profile.is_auctioneer}}</td>\n                  \n                </tr>\n                <tr>\n                  <th scope=\"row\">Bidder</th>\n                  <td>{{user.profile.is_bidder}}</td>\n                  \n                </tr>\n          \n                <tr>\n                  <th scope=\"row\">Pincode</th>\n                  <td>{{user.profile.pincode}}</td>\n                  \n                </tr>\n               \n              </tbody>\n            </table>\n           \n            </div>\n            </div>\n          </div>\n          </ng-container>\n<!--User update form by admin when admin clicks update-->\n          <ng-container *ngIf=\"updateTable\">\n            <!--passing data from parent to child component-->\n          <app-user-update-by-admin [updated_user]=\"user\"></app-user-update-by-admin>\n        </ng-container>\n\n\n    </div>\n</div>\n","import { Component, OnInit, Input } from '@angular/core';\nimport { User } from '@app/classes/user';\nimport { UserService } from '@app/services/user.service';\nimport { SpinnerService } from '@app/services/spinner.service';\n\n@Component({\n  selector: 'app-user-update-by-admin',\n  templateUrl: './user-update-by-admin.component.html',\n  styles: [``\n  ]\n})\nexport class UserUpdateByAdminComponent implements OnInit {\n  //received from parent component-->'admin component'-->see admin component html file\n@Input('updated_user') updated_user:User;\n  constructor(private userService:UserService,private spinner:SpinnerService) {\n   }\n\n  ngOnInit(): void {\n  }\n\n  updateUser(){\n    //code for updating user\n    this.userService.updateUserByAdmin(this.updated_user).subscribe(resp=>{\n      this.spinner.remove();\n      alert(\"user is updated\");\n    },error=>{\n      this.spinner.remove();\n      console.log(error);\n      alert(\"error:\"+error);\n    })\n   \n  }\n}\n","\r\n    <!--update user by admin excluding 'username' field as it is used in searching user-->\r\n<div class=\"container\">\r\n    <div class=\"container-fluid\">\r\n    \r\n    <h1>Update form</h1>\r\n    <hr>\r\n    \r\n  <form #updateForm=\"ngForm\" (ngSubmit)=\"updateUser()\" novalidate>\r\n  \r\n    \r\n  <div class=\"form-group\">\r\n    <label for=\"uname_id\">UserName</label>\r\n      <input type=\"text\" id=\"uname_id\" name=\"username\" class=\"form-control\" [disabled]=\"true\" [(ngModel)]=\"updated_user.username\" #uname=\"ngModel\">\r\n    <small class=\"text-success\">Username is read only</small>\r\n    </div>\r\n  \r\n  <div class=\"form-group\">\r\n    <label for=\"email_id\">Email</label>\r\n    <input type=\"email\" name=\"email\" [(ngModel)]=\"updated_user.email\"  required maxlength=\"50\" pattern=\"\\S{1,40}@gmail\\.com$\" id=\"email_id\" class=\"form-control\" #email=\"ngModel\" [class.is-invalid]=\"email.touched && email.invalid\">\r\n    <div *ngIf=\"email.errors && email.touched\">\r\n      <small class=\"text-danger\" *ngIf=\"email.errors.required\">Email is required</small>\r\n      <small class=\"text-danger\" *ngIf=\"email.errors.maxlength\">Email should be of max 50 chars</small>\r\n      <small class=\"text-danger\" *ngIf=\"email.errors.pattern && (!email.errors.maxlength && !email.errors.minlength) \">Email should end with '@gmail.com' and should not contain white spaces</small>\r\n\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"form-group\">\r\n    <label for=\"fname_id\">FirstName</label>\r\n    <input type=\"text\" name=\"first_name\" [(ngModel)]=\"updated_user.first_name\"  minlength=\"3\" maxlength=\"30\" pattern=\"\\S{3,30}\"  required id=\"fname_id\" class=\"form-control\" #fname=\"ngModel\" [class.is-invalid]=\"fname.touched && fname.invalid\">\r\n    <div *ngIf=\"fname.errors && fname.touched\">\r\n      <small class=\"text-danger\" *ngIf=\"fname.errors.required\">FirstName is required</small>\r\n      <small class=\"text-danger\" *ngIf=\"fname.errors.minlength\">FirstName should be of min 3 chars</small>\r\n      <small class=\"text-danger\" *ngIf=\"fname.errors.maxlength\">FirstName should be of max 30 chars</small>\r\n      <small class=\"text-danger\" *ngIf=\"fname.errors.pattern && (!fname.errors.maxlength && !fname.errors.minlength) \"> No Whitespaces</small>\r\n\r\n    </div>\r\n  \r\n  </div>\r\n\r\n  <div class=\"form-group\">\r\n    <label for=\"lname_id\">LastName</label>\r\n    <input type=\"text\" name=\"last_name\" [(ngModel)]=\"updated_user.last_name\"  required minlength=\"3\" maxlength=\"30\" pattern=\"\\S{3,30}\" id=\"lname_id\" class=\"form-control\" #lname=\"ngModel\" [class.is-invalid]=\"lname.touched && lname.invalid\">\r\n    <div *ngIf=\"lname.errors && lname.touched\">\r\n      <small class=\"text-danger\" *ngIf=\"lname.errors.required\">LastName is required</small>\r\n      <small class=\"text-danger\" *ngIf=\"lname.errors.minlength\">LastName should be of min 3 chars</small>\r\n      <small class=\"text-danger\" *ngIf=\"lname.errors.maxlength\">LastName should be of max 30 chars</small>\r\n      <small class=\"text-danger\" *ngIf=\"lname.errors.pattern && (!lname.errors.maxlength && !lname.errors.minlength) \">No Whitespaces</small>\r\n\r\n    </div>\r\n  \r\n  </div>\r\n\r\n  <div ngModelGroup=\"profile\">\r\n  <div class=\"form-group\">\r\n    <label for=\"addr_id\">Address</label>\r\n    <input type=\"text\" class=\"form-control\" id=\"addr_id\" name=\"address\" [(ngModel)]=\"updated_user.profile.address\" required  minlength=\"10\" maxlength=\"100\" #addr=\"ngModel\" [class.is-invalid]=\"addr.touched && addr.invalid\"> \r\n    <div *ngIf=\"addr.errors && addr.touched\">\r\n      <small class=\"text-danger\" *ngIf=\"addr.errors.required\">Address is required</small>\r\n      <small class=\"text-danger\" *ngIf=\"addr.errors.minlength\">Address should be of min 10 chars</small>\r\n      <small class=\"text-danger\" *ngIf=\"addr.errors.maxlength\">Address should be of max 100 chars</small>\r\n    </div>\r\n  \r\n  </div>\r\n  \r\n  <div class=\"form-group\">\r\n    <label for=\"pin_id\">Pincode</label>\r\n    <input type=\"text\" class=\"form-control\" id=\"pin_id\" pattern=\"^[1-9][0-9]{5}$\" name=\"pincode\" [(ngModel)]=\"updated_user.profile.pincode\" required #pin=\"ngModel\" [class.is-invalid]=\"pin.touched && pin.invalid\">\r\n  <div *ngIf=\"pin.errors && pin.touched\">\r\n    <small class=\"text-danger\" *ngIf=\"pin.errors.required\">Pincode is required</small>\r\n    <small class=\"text-danger\" *ngIf=\"pin.errors.pattern\">Pincode must be of six digits starting with [1-9]</small>\r\n  \r\n  </div>\r\n  </div>\r\n\r\n  <div class=\"form-group\">\r\n    <label for=\"contact_id\">Contact No</label>\r\n    <input type=\"text\" class=\"form-control\" id=\"contact_id\" name=\"contact_no\" [(ngModel)]=\"updated_user.profile.contact_no\" required pattern=\"^[1-9][0-9]{9}$\" #phone=\"ngModel\" [class.is-invalid]=\"phone.touched && phone.invalid\"> \r\n    <div *ngIf=\"phone.errors && phone.touched\">\r\n      <small class=\"text-danger\" *ngIf=\"phone.errors.required\">Contact No is required</small>\r\n      <small class=\"text-danger\" *ngIf=\"phone.errors.pattern\">Contact No must be of ten digits starting with [1-9]</small>\r\n    \r\n    </div>\r\n  \r\n  </div>\r\n\r\n  <div class=\"form-group\">\r\n    <label for=\"bio_id\">Bio</label>\r\n    <input type=\"text\" class=\"form-control\" id=\"bio_id\" name=\"bio\" [(ngModel)]=\"updated_user.profile.bio\" maxlength=\"100\" #bio=\"ngModel\" [class.is-invalid]=\"bio.touched && bio.invalid\"> \r\n    <div *ngIf=\"bio.errors && bio.touched\">\r\n      <small class=\"text-danger\" *ngIf=\"bio.errors.maxlength\"> Bio should be of max 100 chars</small>\r\n    \r\n    </div>\r\n  \r\n  </div>\r\n<div class=\"form-group\">\r\n    Auctioneer\r\n  <div class=\"form-check\">\r\n    \r\n    <input type=\"radio\" class=\"form-check-input\" id=\"auction_true_id\" name=\"auctioneer\" #auctioneer=\"ngModel\" [value]=\"true\" required [(ngModel)]=\"updated_user.profile.is_auctioneer\"> \r\n    <label for=\"auction_true_id\" class=\"form-check-label\">Yes</label>  \r\n  </div>\r\n\r\n  <div class=\"form-check\">\r\n    \r\n    <input type=\"radio\" class=\"form-check-input\" id=\"auction_false_id\" name=\"auctioneer\" #auctioneer=\"ngModel\" [value]=\"false\" required [(ngModel)]=\"updated_user.profile.is_auctioneer\"> \r\n    <label for=\"auction_false_id\" class=\"form-check-label\">No</label>  \r\n  </div>\r\n</div>\r\n\r\n<div class=\"form-group\">\r\n    Bidder\r\n  <div class=\"form-check\">\r\n    \r\n    <input type=\"radio\" class=\"form-check-input\" id=\"bidder_true_id\" name=\"bidder\" #bidder=\"ngModel\" [value]=\"true\" required [(ngModel)]=\"updated_user.profile.is_bidder\"> \r\n    <label for=\"bidder_true_id\" class=\"form-check-label\">Yes</label>  \r\n  </div>\r\n\r\n  <div class=\"form-check\">\r\n    \r\n    <input type=\"radio\" class=\"form-check-input\" id=\"bidder_false_id\" name=\"bidder\" #bidder=\"ngModel\" [value]=\"false\" required [(ngModel)]=\"updated_user.profile.is_bidder\"> \r\n    <label for=\"bidder_false_id\" class=\"form-check-label\">No</label>  \r\n  </div>\r\n</div>\r\n\r\n  </div>\r\n  \r\n  \r\n  <button [disabled]=\"updateForm.form.invalid\" class=\"btn btn-primary\" type=\"submit\" >Submit</button>\r\n  \r\n  \r\n  </form>\r\n  \r\n  </div>\r\n  \r\n</div>","import { Component, OnInit } from '@angular/core';\nimport { BidEvent } from '@app/classes/bid-event';\nimport { Product } from '@app/classes/product';\nimport { EventService } from '@app/services/event.service';\nimport { ProductImage } from '@app/classes/product-image';\nimport { SpinnerService } from '@app/services/spinner.service';\n\n@Component({\n  selector: 'app-event-create',\n  templateUrl: './event-create.component.html',\n  styles: [``]\n})\nexport class EventCreateComponent implements OnInit {\npublic event:BidEvent;\n//initially true so that errors are not shown\npublic is_start_date_valid:boolean=true;\npublic is_deadline_valid:boolean=true;\npublic is_error:boolean=false;\n  constructor(private eventService:EventService,private spinner:SpinnerService) { \n    //initialising new BidEvent object with default values \n    this.event=new BidEvent(new Product(),new ProductImage());\n  }\n\n  ngOnInit(): void {\n  }\n//parse date-->used for start_date and deadline of event object\n  parse_date(date:Date):number{\n    return new Date(date).getTime();//returns milliseconds since epoch\n  }\n\n  validate_start_date():boolean{\n    //true when start_date is 30 hours ahead of now \n  const current_date=Date.now();\n    const  parsed_start_date=this.parse_date(this.event.start_date)\n    const hours=Math.floor((parsed_start_date-current_date)/(1000*3600));\n    if(hours>=30){\n      return true;\n    }\n    else\n    return false;\n  }\n\n  //true when deadline is atleast 2 hours ahead\n  validate_deadline():boolean{\n    const parsed_deadline=this.parse_date(this.event.deadline);\n    const parsed_start_date=this.parse_date(this.event.start_date);\n    const hours:number=Math.floor((parsed_deadline-parsed_start_date)/(1000*3600));\n    if(hours>=2){\n      return true;\n    }\n    else\n    return false;\n  }\n\nvalidate_baseprice(){\nif(this.event.base_price>=1 && this.event.base_price<=10000000){\nthis.is_error=false;\nreturn true;\n    }\n    else\n    this.is_error=true;\n    return false;\n  }\n\nonSubmit(){\n  this.validate_baseprice();\n  //setting values to decide if errors are present in either....\n  this.is_start_date_valid=this.validate_start_date();//showing error if there is....\n  this.is_deadline_valid=this.validate_deadline();//showing error if there is ....\n  if(this.is_start_date_valid && (this.is_deadline_valid && !this.is_error)){\n\n  this.eventService.addEventByAuctioneer(this.event).subscribe(resp=>{\n  \n\n    if(resp.status==201){\n      this.spinner.remove();\n   alert(\"event created successfully\");\n    }},error=>\n    {  this.spinner.remove(); \n      alert(error)\n    });\n\n}\n}\n}","\n<div class=\"container\">\n    <div class=\"container-fluid\">\n    \n    <h1>Create Event</h1>\n    <hr>\n    <!--Event create form   client side validations for start date and deadline -->\n  <form #eventCreate=\"ngForm\" (ngSubmit)=\"onSubmit()\">\n  \n    \n  <div class=\"form-group\">\n    <label for=\"startdate_id\">Start Date</label>\n      <input type=\"datetime-local\" id=\"startdate_id\" name=\"startdate\" class=\"form-control\" required  [(ngModel)]=\"event.start_date\" #startdate=\"ngModel\">\n      <div *ngIf=\"startdate.errors && startdate.touched\">\n        <small class=\"text-danger\" *ngIf=\"startdate.errors.required\">Start date is required</small>\n  \n      </div>\n      <!--if start date is valid-->\n      <small class=\"text-danger\" *ngIf=\"!is_start_date_valid\">Start date should be atleast 30 hours from now</small>\n    </div>\n\n    <div class=\"form-group\">\n        <label for=\"deadline_id\">Deadline</label>\n          <input type=\"datetime-local\" id=\"deadline_id\" name=\"deadline\" class=\"form-control\" required  [(ngModel)]=\"event.deadline\" #deadline=\"ngModel\">\n          <div *ngIf=\"deadline.errors && deadline.touched\">\n            <small class=\"text-danger\" *ngIf=\"deadline.errors.required\">Deadline is required</small>\n      \n          </div>\n          <!--if deadline is valid-->\n          <small class=\"text-danger\" *ngIf=\"!is_deadline_valid\">Deadlline should be atleast 2 hours ahead from start date</small>\n\n        </div>\n\n        <div class=\"form-group\">\n            <label for=\"baseprice_id\">Base Price</label>\n              <input type=\"number\" id=\"baseprice_id\" name=\"baseprice\" class=\"form-control\" required [(ngModel)]=\"event.base_price\" #baseprice=\"ngModel\">\n            <div *ngIf=\"baseprice.errors && baseprice.touched\">\n              <small class=\"text-danger\" *ngIf=\"baseprice.errors.required\">Base price is required</small>\n        \n            </div>\n            <div *ngIf=\"is_error\" class=\"text-danger\">Base price should be greater than 1 and less than or equal to 1 crore</div>\n            </div>\n        <div ngModelGroup=\"product\">\n            <div class=\"form-group\">\n                <label for=\"pname_id\">Product Name</label>\n                <input type=\"text\" class=\"form-control\" id=\"pname_id\" name=\"product_name\" [(ngModel)]=\"event.product.name\" required  minlength=\"3\" maxlength=\"50\" #pname=\"ngModel\" [class.is-invalid]=\"pname.touched && pname.invalid\"> \n                <div *ngIf=\"pname.errors && pname.touched\">\n                    <small class=\"text-danger\" *ngIf=\"pname.errors.required\">Product name is required</small>\n                    <small class=\"text-danger\" *ngIf=\"pname.errors.minlength\">Product name should be of min 3 chars</small>\n                    <small class=\"text-danger\" *ngIf=\"pname.errors.maxlength\">Product name should be of max 50 chars</small>\n                </div>\n                \n            </div>\n            <div class=\"form-group\">\n                <label for=\"category_id\">Category</label>\n                <input type=\"text\" class=\"form-control\" id=\"category_id\" name=\"category\" [(ngModel)]=\"event.product.category\" required  minlength=\"3\" maxlength=\"50\" #category=\"ngModel\" [class.is-invalid]=\"category.touched && category.invalid\"> \n                <div *ngIf=\"category.errors && category.touched\">\n                    <small class=\"text-danger\" *ngIf=\"category.errors.required\">Category is required</small>\n                    <small class=\"text-danger\" *ngIf=\"category.errors.minlength\">Category should be of min 3 chars</small>\n                    <small class=\"text-danger\" *ngIf=\"category.errors.maxlength\">Category should be of max 50 chars</small>\n                </div>\n                \n            </div>\n            <div class=\"form-group\">\n                <label for=\"desc_id\">Description</label>\n                <input type=\"text\" class=\"form-control\" id=\"desc_id\" name=\"desc\" [(ngModel)]=\"event.product.description\" required  minlength=\"3\" maxlength=\"100\" #desc=\"ngModel\" [class.is-invalid]=\"desc.touched && desc.invalid\"> \n                <div *ngIf=\"desc.errors && desc.touched\">\n                    <small class=\"text-danger\" *ngIf=\"desc.errors.required\">Description is required</small>\n                    <small class=\"text-danger\" *ngIf=\"desc.errors.minlength\">Description should be of min 3 chars</small>\n                    <small class=\"text-danger\" *ngIf=\"desc.errors.maxlength\">Description should be of max 100 chars</small>\n                </div>\n                \n            </div>\n\n\n        </div>\n\n        <button type=\"submit\" [disabled]=\"eventCreate.form.invalid\" class=\"btn btn-primary\">Submit</button>\n    </form>\n\n\n\n    </div>\n    </div>","import { Component, OnInit } from '@angular/core';\nimport { Router,ActivatedRoute ,ParamMap} from '@angular/router';\nimport { BidEvent } from '@app/classes/bid-event';\nimport { Product } from '@app/classes/product';\nimport { AuthService } from '@app/services/auth.service';\nimport { ShareEventService } from '@app/services/share-event.service';\nimport { ShareUserService } from '@app/services/share-user.service';\nimport { BidService } from '@app/services/bid.service';\nimport { Bid } from '@app/classes/bid';\nimport { EventService } from '@app/services/event.service';\nimport { User } from '@app/classes/user';\nimport { Profile } from '@app/classes/profile';\nimport { ProductImage } from '@app/classes/product-image';\nimport { SpinnerService } from '@app/services/spinner.service';\n\n@Component({\n  selector: 'app-event-detail',\n  templateUrl: './event-detail.component.html',\n  styles: [``]\n})\nexport class EventDetailComponent implements OnInit {\n  //to obtain event id for which details need to be shown\n  event_id:number=null;\n\n  event:BidEvent=null;\n\n  is_staff:boolean=false;\n  can_bid:boolean=false;//if current datetime is between start date and end date of event\n\n  is_bidder:boolean=false;\n  take_bid:boolean=false;//only if user say yes:))\n\n  user_bidprice:number=null;\n\n  is_error:boolean=false;\n\n  highest_bid:number=null;\n  highest_bid_user:User=new User(new Profile());\n\n  constructor(private router:Router,private route:ActivatedRoute,private shareEvent:ShareEventService,\n    private authService:AuthService,private shareUser:ShareUserService,private bidService:BidService,private eventService:EventService,\n     private spinner:SpinnerService) {\n  console.log(\"event detail:\"+this.event);\n   }\n  \n  ngOnInit(): void {\n\n    //initialising with default values\n    this.event=new BidEvent(new Product(),new ProductImage);\n\n//obtaining event_id from route parameters\n    this.route.paramMap.subscribe((params:ParamMap)=>{\n      let id=parseInt(params.get('id'));\n      this.event_id=id;\n    });\n\n    //obtaining event with given event_id from service providing 'events array'\n    this.shareEvent.getShareEvents().subscribe(val=>{\n\n      if(val.length!=0){\n        this.event=val.filter(x=>x.id==this.event_id)[0];\n\n        if(this.event!=null){//callback that is executed only after receiving event details\n          this.authService.getLoggedInUser().subscribe(resp=>this.is_staff=resp[\"is_staff\"])\n\n          const current_datetime=Date.now()\n          const parsed_start_date=this.parse_date(this.event.start_date);//converts in milliseconds since epoch\n          const parsed_deadline=this.parse_date(this.event.deadline);\n\n       if(current_datetime>=parsed_start_date && current_datetime<parsed_deadline){\n\n       this.can_bid=true;\n       //getting 'is_bidder' property of currently logged in user\n      this.shareUser.getUser().subscribe(val=>this.is_bidder=val.profile[\"is_bidder\"]    )\n      //will tell if user is admin\n      console.log(this.is_bidder+\" \"+this.can_bid)\n       }\n        }\n      \n      }\n      \n    });\n\n  }\n  //delete event option for admin\n  deleteEvent(){\n    let answer=confirm(\"are you sure want to delete?\");\n\n    if(answer){\n      console.log(\"in event component\"+this.event_id)\n\n    this.eventService.deleteEventByAdmin(this.event_id).subscribe(resp=>\n      {   this.spinner.remove(); \n        alert(\"successfully deleted\")},error=>{\n          this.spinner.remove();\n          alert(error);\n        });\n    }\n  }\n\n  onClick(){\n    this.take_bid=true;\n  }\n\n  validate_bid(){\nif(this.user_bidprice>=this.event.base_price && this.user_bidprice<=100000000){\n\nconst current_datetime=new Date();\n//storing time at which bid was placed -->for validation on server side\nconsole.log(current_datetime)\n\nlet bid=new Bid(this.user_bidprice,current_datetime);\n//send bid\nthis.bidService.place_bid(bid,this.event.id).subscribe(resp=>\n  {   this.spinner.remove(); \n    alert(\"bid successfully placed\")},error=>\n  {  this.spinner.remove();  \n    alert(error);});\n\nthis.take_bid=false;\n  }\n\n    else\n    this.is_error=true;\n    \n  }\n\n  parse_date(date:Date):number{\n    return new Date(date).getTime();//returns milliseconds since epoch\n  }\n\n  goBack(){\n    this.router.navigate(['../'],{relativeTo:this.route});\n  }\n  \n  \n  getHighestBid(){\n    this.bidService.retrieveHighestBid(this.event_id).subscribe(resp=>\n      {\n        this.spinner.remove();\n        this.highest_bid=resp.body[\"highest_bid\"];\n    this.highest_bid_user=resp.body[\"user\"];\n    },error=>\n    {  this.spinner.remove();\n      alert(error);\n    })\n  }\n\n}\n","\n\n<div class=\"container\">\n  <div class=\"container-fluid\">\n\n    <div class=\"row row-cols-1 row-cols-md-2\">\n      <div class=\"col mb-4\">\n    <div class=\"card text-white bg-dark mb-3\">\n      <img src=\"{{event.product_image.image}}\" class=\"card-img-top\" alt=\"Product Image\">\n    </div>\n    </div>\n    </div>\n    \n\n<table class=\"table table-hover table-dark\">\n    <thead>\n      <tr>\n        <th scope=\"col\">Event Details:</th>\n       <!-- <th scope=\"col\">First</th>\n        <th scope=\"col\">Last</th>\n        <th scope=\"col\">Handle</th>-->\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <th scope=\"row\">Id</th>\n        <td>{{event.id}}</td>\n        \n      </tr>\n\n      <tr>\n        <th scope=\"row\">Date Added</th>\n        <td>{{event.date_added |date :'medium'}}</td>\n        \n      </tr>\n      <tr>\n        <th scope=\"row\">Start Date</th>\n        <td>{{event.start_date|date :'medium'}}</td>\n        \n      </tr>\n      <tr>\n        <th scope=\"row\">Deadline</th>\n        <td>{{event.deadline|date:'medium'}}</td>\n        \n      </tr>\n      <tr>\n        <th scope=\"row\">Name</th>\n        <td>{{event.product.name}}</td>\n        \n      </tr>\n      <tr>\n        <th scope=\"row\">Category</th>\n        <td>{{event.product.category}}</td>\n        \n      </tr>\n      <tr>\n        <th scope=\"row\">Description</th>\n        <td>{{event.product.description}}</td>\n        \n      </tr>\n      <tr>\n        <th scope=\"row\">Base Price</th>\n        <td>{{event.base_price}}</td>\n        \n      </tr>\n    </tbody>\n  </table>\n<ng-container *ngIf=\"can_bid && is_bidder\">\n  <div class=\"col mb-4\">\n    <div class=\"card text-white bg-dark mb-3\">\n      <div class=\"card-body\">\n        <p class=\"card-text\">Want to place bid?</p>\n        <p class=\"card-text\"><button class=\"btn btn-primary\" (click)=\"onClick()\">Yes</button></p>\n        <p class=\"card-text\">\n          <ng-container *ngIf=\"take_bid\">\n            \n              <form #register_bid=\"ngForm\" (ngSubmit)=\"validate_bid()\">\n                <div class=\"form-group\">\n              <input type=\"number\" name=\"bidprice\" #bidprice=\"ngModel\" class=\"form-control\"  required [(ngModel)]=\"user_bidprice\">\n            <div *ngIf=\"bidprice.errors && bidprice.touched\">\n              <small *ngIf=\"bidprice.errors.required\">Bid price is required</small>\n            </div>    \n            <div *ngIf=\"is_error\">Minimum bid price is {{event.base_price}}. Max bid price is 10 crore</div>\n            </div>\n            <button [disabled]=\"register_bid.form.invalid\" class=\"btn btn-primary\">Place bid</button>\n            </form>\n            \n          </ng-container>\n        </p>\n        <p class=\"card-text\"><button class=\"btn btn-primary\" (click)=\"getHighestBid()\">Get Highest Bid</button></p>\n        <p class=\"card-text\">Current highest bid is&nbsp; {{highest_bid}}</p>\n        <p class=\"card-text\">\n        <ng-container *ngIf=\"is_staff\">\n         Highest bid User&nbsp;:&nbsp;{{highest_bid_user.username+\"  \"+highest_bid_user.profile.contact_no}}\n        </ng-container>\n      </p>\n      </div>\n    </div>\n\n  </div>\n</ng-container>\n<ng-container *ngIf=\"is_staff\">\n  <button class=\"btn btn-primary\" (click)=\"deleteEvent()\">Delete Event</button>\n</ng-container>\n<button class=\"btn btn-primary\" (click)=\"goBack()\">Back</button>\n\n</div>\n</div>","import { Component, OnInit, Input } from '@angular/core';\nimport {EventService} from '@app/services/event.service';\nimport { BidEvent } from '@app/classes/bid-event';\nimport { ShareEventService } from '@app/services/share-event.service';\n@Component({\n  selector: 'app-event-list',\n  templateUrl: './event-list.component.html',\n  styles: [`\n  `]\n})\nexport class EventListComponent implements OnInit {\n\n public eventList:BidEvent[]=[];\n public filtered_set:BidEvent[]=[];\n public filter_date:Date=null;\n  constructor(private eventService:EventService,public shareEvent:ShareEventService) { \n  \n  }\n\n  ngOnInit(): void {\n    //obtaining all events from this service--->returns behavior subject containing events array\n\n    this.shareEvent.getShareEvents().subscribe(value=>{this.eventList=value;\n    this.filtered_set=this.eventList;\n    });\n    console.log(\"displaying new list\");\n  }\n\n  filtering(inputdate:Date){\n    this.filtered_set=this.eventList.filter(x=>x.start_date>=inputdate);\n\n  }\n}\n","    <div class=\"container\">\n    <div class=\"container-fluid\">\n    \n      <div class=\"card text-white bg-dark mb-3\">\n        <div class=\"card-body\">\n          <input type=\"datetime-local\" name=\"inputdate\" placeholder=\"filter events by date\" required #inputdate=\"ngModel\" [(ngModel)]=\"filter_date\">\n          <p class=\"card-text\"><button [disabled]=\"inputdate.errors\" class=\"btn btn-primary\" (click)=\"filtering(inputdate.value)\">Filter</button></p>\n        </div>\n      </div>\n\n\n      \n  \n        <div class=\"card text-white bg-dark mb-3\" *ngIf=\"filtered_set.length!=0\">\n          <div class=\"card-body\">\n            <p class=\"card-text\">{{filtered_set.length}} events received</p>\n          </div>\n        </div>\n  \n      <ng-container *ngIf=\"filtered_set.length==0\">\n\n        <blockquote class=\"blockquote\">\n          <p class=\"mb-0\">There are no events currently</p>\n        </blockquote>\n      \n      </ng-container>\n\n    <div class=\"row row-cols-1 row-cols-md-3\">\n\n\n    \n\n      <ng-container  *ngFor=\"let event of filtered_set\">\n\n      \n\n        <div class=\"col mb-4\">\n          <div class=\"card text-white bg-dark mb-3\">\n            <div class=\"card-header\"><h5>Event Id&nbsp;:&nbsp;{{event.id}}</h5></div>\n            <a routerLink=\"/events/{{event.id}}\" >\n             <img src=\"{{event.product_image.image}}\" class=\"card-img-top\" alt=\"{{event.product.category}}\">\n            </a>\n            <div class=\"card-body\">\n              <h5 class=\"card-title\">{{event.product.name  | titlecase}}</h5>\n              <p class=\"card-text\">Start Date&nbsp;:&nbsp;{{event.start_date|date:'medium'}}</p>\n              <p class=\"card-text\">Base Price&nbsp;:&nbsp;{{event.base_price}}</p>\n            </div>\n            <div class=\"card-footer\">\n              <small class=\"text-muted\">{{event.product.description | titlecase}}</small>\n            </div>\n          </div>\n        </div>\n\n    </ng-container>\n    </div>\n    \n  \n    </div>\n    </div>","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-page-not-found',\n  template: `\n  <h1>HTTP 404</h1>\n    <p>\n      page-not-found \n    </p>\n  `,\n  styles: [\n  ]\n})\nexport class PageNotFoundComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { UserService } from '@app/services/user.service';\nimport { ShareUserService } from '@app/services/share-user.service';\nimport { ProfileImage } from '@app/classes/profile-image';\nimport { SpinnerService } from '@app/services/spinner.service';\n\n@Component({\n  selector: 'app-profile-image',\n  templateUrl: './profile-image.component.html',\n  styles: [``]\n})\nexport class ProfileImageComponent implements OnInit {\npublic image_object:ProfileImage;\npublic is_error:boolean=false;\npublic imagefile:File=null;\npublic want_to_update:boolean=false;\n\n  constructor(private shareUser:ShareUserService,private userService:UserService,private spinner:SpinnerService) { }\n\n  ngOnInit(): void {\n\n  this.shareUser.getProfileImage().subscribe(resp=>this.image_object=resp);\n  }\n\n  onFileSelect(event) {\n    if (event.target.files.length > 0) {\n\n      const file:File= event.target.files[0];\n      if(file.size<=100000){//100  kb....\n        console.log(file.size)\n      this.imagefile=file;\n      this.is_error=false;\n      }\n      else\n      this.is_error=true;\n    }\n      else\n      this.is_error=true;\n    \n  }\n  \n\n  onSubmit(){\n  \n    if(!this.is_error && this.imagefile!=null){\n      let filename=this.imagefile.name;\n      console.log(filename)\n\n      let formData:FormData=new FormData();\n      formData.append('file',this.imagefile);\n  this.userService.updateProfileImage(formData,filename).subscribe(resp=>\n  {  this.spinner.remove();  \n    alert(\"profile image successfully updated...refresh profile\")\n  },\n    error=>{\n      this.spinner.remove();\n      alert(error);}\n    );}\n    this.want_to_update=false;\n\n  }\n\n    updateProfileImage(){\n      this.want_to_update=true;\n    }\n  \n\n\n\n}\n","<div class=\"row row-cols-1 row-cols-md-2\">\n\n  <div class=\"col mb-4\">\n    <div class=\"card text-white bg-dark mb-3\">\n      <img src=\"{{image_object.image}}\" class=\"card-img-top\" alt=\"My Profile\">\n        \n    <div class=\"card-body\">\n    <p class=\"card-text\"><button class=\"btn btn-primary\" (click)=\"updateProfileImage()\">Edit Photo</button></p>\n    <div class=\"card-text\" *ngIf=\"want_to_update\">\n     <form  (ngSubmit)=\"onSubmit()\" class=\"form-group\">\n    <div class=\"custom-file\">\n    <input type=\"file\" name=\"image\" accept=\".jpg,.jpeg\"  required (change)=\"onFileSelect($event)\">\n    <div *ngIf=\"is_error\">Image size should be less than 100 Kb</div>\n  </div>\n    <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n   </form> \n\n   </div>\n\n    </div>\n  </div>\n  </div>\n  </div>","import { Component, OnInit, Input } from '@angular/core';\nimport { User } from '@app/classes/user';\nimport { UserService } from '@app/services/user.service';\nimport { SpinnerService } from '@app/services/spinner.service';\n\n@Component({\n  selector: 'app-profile-update',\n  templateUrl: './profile-update.component.html',\n  styles: [``]\n})\nexport class ProfileUpdateComponent implements OnInit {\n  @Input('user') updated_user:User;\n  constructor(private userService:UserService,private spinner:SpinnerService) { }\n\n  ngOnInit(): void {\n  }\n\n  profileUpdate(){\n\n    this.userService.updateProfileByUser(this.updated_user).subscribe(resp=>\n  {     \n    this.spinner.remove();\n    alert(\"profile updated successfully\")\n  },\n  error=>{\n    \n    this.spinner.remove();\n    alert(error);\n\n  });\n  \n}\n}\n","\n    \n    <h1>Update Profile</h1>\n    <hr>\n   \n    \n  <form #updateProfile=\"ngForm\" (ngSubmit)=\"profileUpdate()\" novalidate>\n  \n    <!--form is valid ?{{register.form.valid}}//to check form is valid-->\n    \n  <div class=\"form-group\">\n    <label for=\"uname_id\">UserName</label>\n      <input type=\"text\" id=\"uname_id\" name=\"username\" class=\"form-control\" required  pattern=\"\\S{3,30}\" minlength=\"3\" maxlength=\"30\" [(ngModel)]=\"updated_user.username\" #uname=\"ngModel\" [class.is-invalid]=\"uname.touched && uname.invalid\">\n    <div *ngIf=\"uname.errors && uname.touched\">\n      <small class=\"text-danger\" *ngIf=\"uname.errors.required\">Username is required</small>\n      <small class=\"text-danger\" *ngIf=\"uname.errors.maxlength\">Username should be of max 30 chars</small>\n      <small class=\"text-danger\" *ngIf=\"uname.errors.minlength\">Username should be of min 3 chars</small>\n      <small class=\"text-danger\" *ngIf=\"uname.errors.pattern && (!uname.errors.maxlength && !uname.errors.minlength) \">No whitespaces</small>\n\n    </div>\n    </div>\n  \n  <div class=\"form-group\">\n    <label for=\"email_id\">Email</label>\n    <input type=\"email\" name=\"email\" [(ngModel)]=\"updated_user.email\"  required maxlength=\"50\" pattern=\"\\S{1,40}@gmail\\.com$\" id=\"email_id\" class=\"form-control\" #email=\"ngModel\" [class.is-invalid]=\"email.touched && email.invalid\">\n    <div *ngIf=\"email.errors && email.touched\">\n      <small class=\"text-danger\" *ngIf=\"email.errors.required\">Email is required</small>\n      <small class=\"text-danger\" *ngIf=\"email.errors.maxlength\">Email should be of max 50 chars</small>\n      <small class=\"text-danger\" *ngIf=\"email.errors.pattern && (!email.errors.maxlength) \">Email should end with '@gmail.com' and should not contain white spaces</small>\n\n    </div>\n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"fname_id\">FirstName</label>\n    <input type=\"text\" name=\"first_name\" [(ngModel)]=\"updated_user.first_name\"  minlength=\"3\" maxlength=\"30\" pattern=\"\\S{3,30}\"  required id=\"fname_id\" class=\"form-control\" #fname=\"ngModel\" [class.is-invalid]=\"fname.touched && fname.invalid\">\n    <div *ngIf=\"fname.errors && fname.touched\">\n      <small class=\"text-danger\" *ngIf=\"fname.errors.required\">FirstName is required</small>\n      <small class=\"text-danger\" *ngIf=\"fname.errors.minlength\">FirstName should be of min 3 chars</small>\n      <small class=\"text-danger\" *ngIf=\"fname.errors.maxlength\">FirstName should be of max 30 chars</small>\n      <small class=\"text-danger\" *ngIf=\"fname.errors.pattern && (!fname.errors.maxlength && !fname.errors.minlength) \"> No Whitespaces</small>\n\n    </div>\n  \n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"lname_id\">LastName</label>\n    <input type=\"text\" name=\"last_name\" [(ngModel)]=\"updated_user.last_name\"  required minlength=\"3\" maxlength=\"30\" pattern=\"\\S{3,30}\" id=\"lname_id\" class=\"form-control\" #lname=\"ngModel\" [class.is-invalid]=\"lname.touched && lname.invalid\">\n    <div *ngIf=\"lname.errors && lname.touched\">\n      <small class=\"text-danger\" *ngIf=\"lname.errors.required\">LastName is required</small>\n      <small class=\"text-danger\" *ngIf=\"lname.errors.minlength\">LastName should be of min 3 chars</small>\n      <small class=\"text-danger\" *ngIf=\"lname.errors.maxlength\">LastName should be of max 30 chars</small>\n      <small class=\"text-danger\" *ngIf=\"lname.errors.pattern && (!lname.errors.maxlength && !lname.errors.minlength) \">No Whitespaces</small>\n\n    </div>\n  \n  </div>\n\n  <div ngModelGroup=\"profile\">\n  <div class=\"form-group\">\n    <label for=\"addr_id\">Address</label>\n    <input type=\"text\" class=\"form-control\" id=\"addr_id\" name=\"address\" [(ngModel)]=\"updated_user.profile.address\" required  minlength=\"10\" maxlength=\"100\" #addr=\"ngModel\" [class.is-invalid]=\"addr.touched && addr.invalid\"> \n    <div *ngIf=\"addr.errors && addr.touched\">\n      <small class=\"text-danger\" *ngIf=\"addr.errors.required\">Address is required</small>\n      <small class=\"text-danger\" *ngIf=\"addr.errors.minlength\">Address should be of min 10 chars</small>\n      <small class=\"text-danger\" *ngIf=\"addr.errors.maxlength\">Address should be of max 100 chars</small>\n    </div>\n  \n  </div>\n  \n  <div class=\"form-group\">\n    <label for=\"pin_id\">Pincode</label>\n    <input type=\"text\" class=\"form-control\" id=\"pin_id\" pattern=\"^[1-9][0-9]{5}$\" name=\"pincode\" [(ngModel)]=\"updated_user.profile.pincode\" required #pin=\"ngModel\" [class.is-invalid]=\"pin.touched && pin.invalid\">\n  <div *ngIf=\"pin.errors && pin.touched\">\n    <small class=\"text-danger\" *ngIf=\"pin.errors.required\">Pincode is required</small>\n    <small class=\"text-danger\" *ngIf=\"pin.errors.pattern\">Pincode must be of six digits starting with [1-9]</small>\n  \n  </div>\n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"contact_id\">Contact No</label>\n    <input type=\"text\" class=\"form-control\" id=\"contact_id\" name=\"contact_no\" [(ngModel)]=\"updated_user.profile.contact_no\" required pattern=\"^[1-9][0-9]{9}$\" #phone=\"ngModel\" [class.is-invalid]=\"phone.touched && phone.invalid\"> \n    <div *ngIf=\"phone.errors && phone.touched\">\n      <small class=\"text-danger\" *ngIf=\"phone.errors.required\">Contact No is required</small>\n      <small class=\"text-danger\" *ngIf=\"phone.errors.pattern\">Contact No must be of ten digits starting with [1-9]</small>\n    \n    </div>\n  \n  </div>\n\n  <div class=\"form-group\">\n    <label for=\"bio_id\">Bio</label>\n    <input type=\"text\" class=\"form-control\" id=\"bio_id\" name=\"bio\" [(ngModel)]=\"updated_user.profile.bio\" maxlength=\"100\" #bio=\"ngModel\" [class.is-invalid]=\"bio.touched && bio.invalid\"> \n    <div *ngIf=\"bio.errors && bio.touched\">\n      <small class=\"text-danger\" *ngIf=\"bio.errors.maxlength\"> Bio should be of max 100 chars</small>\n    \n    </div>\n  \n  </div>\n\n  </div>\n  \n  <!--disable button if frm is invalid or password and conf. password value doesn't match-->\n  <button [disabled]=\"updateProfile.form.invalid\" class=\"btn btn-primary\" type=\"submit\" >Submit</button>\n  \n  \n  </form>\n  \n  ","import { Component, OnInit } from '@angular/core';\nimport {AuthService} from '@app/services/auth.service';\nimport {Router,ActivatedRoute} from'@angular/router';\nimport { User } from '@app/classes/user';\nimport { ShareUserService } from '@app/services/share-user.service';\nimport { ProfileImage } from '@app/classes/profile-image';\nimport { UserService } from '@app/services/user.service';\nimport { SpinnerService } from '@app/services/spinner.service';\ndeclare let Email: any;\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styles: [`\n  `]\n})\nexport class ProfileComponent implements OnInit {\n  //to store user details\n  user:User\n  public show_update_form:boolean=false;\n  public image_object:ProfileImage; \n  \n  constructor(private authService:AuthService,private router:Router,private route:ActivatedRoute,private shareUser:ShareUserService,\n    private userService:UserService,private spinner:SpinnerService) { }\n\n  ngOnInit(): void {\n    //getting complete user from this service-->returns behavior subject 'user'\n      this.shareUser.getUser().subscribe(resp=>{\n        this.user=resp;\n      });\n      this.shareUser.getProfileImage().subscribe(resp=>{\n        this.image_object=resp;\n        console.log(JSON.stringify(this.image_object));\n      })\n  }\n\n\n\n  updateProfile(){\n\n    this.show_update_form=true;\n  }\n\n\n//take request from user to be abidder and auctioneer\n  user_request(username,request_type){\n    let value:string;\n    if(request_type==='bid'){\n      alert(\"bid request processing\");\n      value=\"bidder\";\n    }\n    else\n    if(request_type==='auction'){\n      alert(\"auction request processing\");\n      value=\"auctioneer\";\n    }\n//sending email\n    Email.send({\n      Host : \"smtp.elasticemail.com\",\n      Username : \"pie99954@gmail.com\",\n      Password : \"7D2959372FBB172F93194EECAEB0ABFF622A\",\n      To : 'sunilpie1997@gmail.com',\n      From : \"pie99954@gmail.com\",\n      Subject : \"Bid_app\",\n      Body : username+\" wants to be a \"+value\n  }).then(\n\n    message => {alert(message);\n    console.log(\"email sent\")}\n  );\n  }\n//to again fetch profile from http sot that user doesn't need to reload\n//new user details if present will be stored in behavior subject so that all components receive same details.\n  refreshProfile(){\n    this.authService.getUser().subscribe(resp=>{\n    this.spinner.remove();\n    alert(\"refreshed\");\n      this.shareUser.setUser(resp.body);\n  }\n    ,error=>{\n      this.spinner.remove();\n      alert(error);});\n\n    this.userService.getProfileImage().subscribe(resp=>{\n  \n      this.spinner.remove();\n      this.shareUser.setProfileImage(resp.body);\n    })\n  }\n\n  \n}\n","<div class=\"container\">\n  <div class=\"container-fluid\">\n    \n    <div class=\"row row-cols-1 row-cols-md-2\">\n      <div class=\"col mb-4\">\n        <div class=\"card text-white bg-dark mb-3\">\n          \n          <a routerLink=\"/profile/image\"><img src=\"{{image_object.image}}\" class=\"card-img-top\" alt=\"Profile Image\"></a>\n          <div class=\"card-body\">\n            <h5 class=\"card-title\">{{user.first_name+\" \"+user.last_name|titlecase}}</h5>\n            <p class=\"card-text\">This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>\n            <p class=\"card-text\">{{user.profile.bio| titlecase}}</p>\n            <p class=\"card-text\"><button class=\"btn btn-primary\" (click)=\"refreshProfile()\">Refresh Profile</button>\n            </p>\n            <p class=\"card-text\"><button class=\"btn btn-primary\" (click)=\"updateProfile()\">Update Profile</button></p>\n            \n            \n          </div>\n        \n        </div>\n\n      </div>\n\n      <div class=\"col mb-4\">\n\n        <table class=\"table table-hover table-dark \">\n          <thead>\n            <tr>\n              <th scope=\"col\">User Details:</th>\n            \n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <th scope=\"row\">Username</th>\n              <td>{{user.username}}</td>\n              \n            </tr>\n            \n            <tr>\n              <th scope=\"row\">Email</th>\n              <td>{{user.email}}</td>\n              \n            </tr>\n            <tr>\n              <th scope=\"row\">Contact No</th>\n              <td>{{user.profile.contact_no}}</td>\n              \n            </tr>\n            <tr>\n              <th scope=\"row\">Address</th>\n              <td>{{user.profile.address}}</td>\n              \n            </tr>\n           \n            <tr>\n              <th scope=\"row\">Auctioneer</th>\n              <td>{{user.profile.is_auctioneer}}</td>\n              \n            </tr>\n            <tr>\n              <th scope=\"row\">Bidder</th>\n              <td>{{user.profile.is_bidder}}</td>\n              \n            </tr>\n      \n            <tr>\n              <th scope=\"row\">Pincode</th>\n              <td>{{user.profile.pincode}}</td>\n              \n            </tr>\n           \n          </tbody>\n        </table>\n        <ng-container *ngIf=\"!user.profile.is_bidder\">\n          <button class=\"btn btn-primary\" (click)=\"user_request(user.first_name,'bid')\">Register as Bidder</button>\n        </ng-container>\n      \n    \n        <ng-container *ngIf=\"!user.profile.is_auctioneer\">\n          <button class=\"btn btn-primary\" (click)=\"user_request(user.username,'auction')\">Register as Auctioneer</button>\n        </ng-container>\n      </div>\n     </div>\n\n\n    <!--User update form if he clicks on 'update profile' button-->\n    <ng-container *ngIf=\"show_update_form\">\n      <!--Pprofile update component-->\n      <app-profile-update [user]=\"user\"></app-profile-update>\n    </ng-container>\n   \n\n  \n\n</div>\n</div>\n\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router, ActivatedRoute } from '@angular/router';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\n\n//activate admin route for only admin\nexport class AdminGuardService implements CanActivate{\nprivate loginStatus:boolean=false;\nprivate is_staff:boolean=false;\n\nconstructor(public authService:AuthService,private router:Router,private route:ActivatedRoute) { }\n\ncanActivate():boolean{\n//receiving values from behavior subject 'LoggedInUser'\n  this.authService.getLoggedInUser().subscribe(value=>{this.loginStatus=value[\"loginStatus\"];\nthis.is_staff=value[\"is_staff\"]  ;\n});\n\n  if(!this.loginStatus || !this.is_staff){\n    this.router.navigate(['/login'],{relativeTo:this.route})\n  return false;\n}\nelse{\n  return true;\n\n}\n}\n\n}\n","import { Injectable } from '@angular/core';\nimport { Router, CanActivate } from '@angular/router';\nimport { AuthService } from './auth.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuardService implements CanActivate {\nprivate loginStatus:boolean=false;\n  constructor(public auth: AuthService, public router: Router) {\n   }\n //for profile\n  canActivate(): boolean {\n    this.auth.getLoggedInUser().subscribe(resp=>{\n      this.loginStatus=resp[\"loginStatus\"];});\n    if (!this.loginStatus){\n      this.router.navigate(['login']);\n      return false;\n    }\n    return true;\n  }\n}","import { Injectable } from '@angular/core';\r\nimport {HttpRequest,HttpHandler,HttpEvent,HttpInterceptor} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { SpinnerService } from './spinner.service';\r\n@Injectable()\r\n//to send Json web token with each request in headers...if present.\r\n//Note:null value is not send\r\nexport class AuthTokenInterceptor implements HttpInterceptor {\r\n\r\n  constructor(private spinnerService:SpinnerService) {}\r\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n\r\n    /* call addQueue method of spinner */\r\n        const token=sessionStorage.getItem(\"token\");\r\n    if(token!=undefined||token!=null){\r\n    request = request.clone({\r\n      setHeaders: {\r\n        Authorization: `Bearer ${sessionStorage.getItem(\"token\")}`\r\n      }\r\n    });}\r\n\r\n    return next.handle(request);\r\n  }\r\n}","import {Injectable} from '@angular/core';\r\nimport {HttpClient, HttpHeaders, HttpErrorResponse,HttpResponse} from '@angular/common/http';\r\nimport {Observable, throwError, BehaviorSubject} from 'rxjs';\r\nimport {User} from '@app/classes/user';\r\nimport {LoggedInUser} from '@app/classes/logged-in-user';\r\n//angular-json web token library\r\nimport {JwtHelperService } from '@auth0/angular-jwt';\r\n//to read jwt-token payload\r\nimport decode from 'jwt-decode';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { RestApiServerService } from './rest-api-server.service';\r\nimport { SpinnerService } from './spinner.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n \r\n  private url:string;\r\n  //behavior subject containing loginStatus, (expiration,is_staff and user_id)-->from token\r\n private subject=new BehaviorSubject<LoggedInUser>(new LoggedInUser());\r\n  public errors: any;\r\n \r\n  constructor(private http: HttpClient,private jwtHelper:JwtHelperService,private restapi:RestApiServerService,private spinner:SpinnerService) {\r\n    this.url=restapi.path;\r\n  }\r\n\r\n  //returning logged in user\r\n public getLoggedInUser():Observable<LoggedInUser>{\r\n    if(!this.isAuthenticated()){\r\n      sessionStorage.clear();\r\n      this.setLoggedInUser(new LoggedInUser());\r\n  }\r\n   return this.subject.asObservable();\r\n  \r\n}\r\n \r\n//function for setting above behavior subject\r\nprivate setLoggedInUser(object:LoggedInUser){\r\n  if(object!=null){\r\n  this.subject.next(object);\r\n\r\n  }\r\n\r\n\r\n  \r\n}\r\n//check token expiry\r\n  private isAuthenticated():boolean {\r\n  const token=sessionStorage.getItem('token');\r\n  if(token==null || token==undefined){\r\n  return false;}\r\n  return !this.jwtHelper.isTokenExpired(token);\r\n  }\r\n\r\n   \r\n   private handleError(error: HttpErrorResponse) {\r\n     \r\n     console.log(\"handling error.......\")\r\n    if (error.error instanceof ErrorEvent) {\r\n      // A client-side or network error occurred. Handle it accordingly.\r\n      console.error('An error occurred:', error.error.message);\r\n      return throwError('client side Error: '+error.error.message);\r\n    } else {\r\n      console.error(\r\n        `Backend returned code: ${error.status}, ` +\r\n        `body was:${error.error.detail},`+//invalid credintials return {'global':......}\r\n        \r\n        `message was: ${error.message}` );\r\n      if(error.status==400)\r\n        return throwError(\"invalid crediantials....try again!!!\");\r\n        \r\n          if(error.status==0)\r\n          return throwError(\"could not connect to server.Check your internet connection!!!\");\r\n          \r\n        return throwError(error.error.detail);\r\n}};\r\n \r\n  public login(LoginUser):Observable<HttpResponse<any>>{\r\n    this.spinner.add();\r\n    if(LoginUser!=null){\r\n    return this.http.post(this.url+'auth/login/', JSON.stringify(LoginUser),{headers: new HttpHeaders({'Content-Type': 'application/json'}),observe:'response'}).pipe(\r\n  \r\n  catchError(this.handleError)\r\n    );}\r\n      \r\n  }\r\n\r\n \r\n  public logout() {\r\n    //clearing session storage and setting default values in behavior subject\r\n    sessionStorage.clear();\r\n    this.setLoggedInUser(new LoggedInUser());\r\n    \r\n}\r\n \r\n   public updateData() {\r\n\r\n    this.errors = [];\r\n    //don't use local storage as it is not secure\r\n    // decode the token to read the user_id,is_staff and expiration timestamp\r\n    const tokenPayload=decode(sessionStorage.getItem(\"token\"));\r\n    const is_staff:boolean=tokenPayload[\"is_staff\"];\r\n    const expiration=new Date(tokenPayload[\"exp\"]*1000);\r\n    const user_id=tokenPayload[\"user_id\"];\r\n    this.setLoggedInUser({\"user_id\":user_id,\"is_staff\":is_staff,\"expiration\":expiration,\"loginStatus\":true})\r\n  }\r\n\r\n  getUser():Observable<HttpResponse<User>>{\r\n    this.spinner.add();\r\n\r\n  return this.http.get<User>(this.url+'user/',\r\n  {headers: new HttpHeaders({'Content-Type': 'application/json'}),observe:'response'}).pipe(\r\n    catchError(this.handleError)\r\n  )\r\n  }\r\n \r\n\r\n\r\n\r\n  \r\n}","import { Injectable } from '@angular/core';\nimport { HttpResponse, HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { Bid } from '@app/classes/bid';\nimport { catchError } from 'rxjs/operators';\nimport { RetrieveBid } from '@app/classes/retrieve-bid';\nimport { RestApiServerService } from './rest-api-server.service';\nimport { SpinnerService } from './spinner.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BidService {\n  private url:string;\n\n  constructor(private http:HttpClient,private restapi:RestApiServerService,private spinner:SpinnerService) {\n    this.url=restapi.path+'api/events/';\n   }\n\n  retrieveHighestBid(event_id:number):Observable<HttpResponse<RetrieveBid>>{\n    this.spinner.add();\n\n  \n    return this.http.get<RetrieveBid>(this.url+event_id+'/highest_bid/',\n    {headers: new HttpHeaders({'Content-Type': 'application/json'}),observe:'response'}).pipe(catchError(this.handleError))\n  }\n\n  place_bid(bid:Bid,event_id:number):Observable<HttpResponse<any>>{\n    this.spinner.add();\n\n    if(bid!=null && event_id!=null){\n    return this.http.post<any>(this.url+event_id+'/bids/create/',JSON.stringify(bid),\n    {headers: new HttpHeaders({'Content-Type': 'application/json'}),observe:'response'}).pipe(\n      catchError(this.handleError)\n    );\n    }\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    console.log(\"handling error.......\")\n   if (error.error instanceof ErrorEvent) {\n     // A client-side or network error occurred. Handle it accordingly.\n     console.error('An error occurred:', error.error.message);\n     return throwError('client side Error: '+error.error.message);\n   } else {\n     console.error(\n       `Backend returned code: ${error.status}, ` +\n       `body was:${error.error.detail},`+\n       \n       `message was: ${error.message}` );\n         if(error.status==0)\n         return throwError(\"could not connect to server.Check your internet connection!!!\");\n        else\n       return throwError(error.error.detail);\n}};\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { AuthService } from './auth.service';\nimport { ShareUserService } from './share-user.service';\n\n@Injectable({\n  providedIn: 'root'\n})\n//read 'is_auctioneer' property from behavior subject 'user' \nexport class CanAuctionGuardService implements CanActivate{\nprivate loginStatus:boolean;\nprivate can_auction:boolean;\n  //double protection\n  constructor(private router:Router,private authService:AuthService,private shareUser:ShareUserService) { }\n\n  canActivate():boolean{\nthis.authService.getLoggedInUser().subscribe(resp=>this.loginStatus=resp[\"loginStatus\"]);\nthis.shareUser.getUser().subscribe(resp=>this.can_auction=resp.profile[\"is_auctioneer\"]);\n\nconsole.log(this.can_auction);\nif(this.loginStatus && this.can_auction){\n  return true;\n}\nelse { \n  if(this.loginStatus){\n    //to inform user to refresh profile for storing latest changes in behavior subject 'user'\n  alert(\"you are not an auctioneer...refresh your profile and try again\");\n  return false;\n}\nelse{\nalert(\"login first\");\nreturn false;\n}\n}\n}\n\n}\n\n\n","import { Injectable } from '@angular/core';\nimport {HttpClient,HttpErrorResponse,HttpHeaders,HttpResponse} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError} from 'rxjs/operators';\nimport { BidEventListAPI } from '@app/classes/bid-event-list-api';\nimport { BidEvent } from '@app/classes/bid-event';\nimport { RestApiServerService } from './rest-api-server.service';\nimport { SpinnerService } from './spinner.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EventService {\n\n  \n  private url:string;\n\n  constructor(private http:HttpClient,private restapi:RestApiServerService,private spinner:SpinnerService) {\n    this.url=restapi.path+'api/events/';\n    \n   }\n//handle error\n   private handleError(error: HttpErrorResponse) {\n\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error.message);\n      return throwError('client side Error: '+error.error.message);\n    } else {\n\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      console.error(\n        `Backend returned code ${error.status}, ` +\n        `body was: ${error.error.detail}, `+\n        `message was: ${error.message}` );\n    \n    // return an observable with a user-facing error message\n    if(error.status==0){\n      return throwError(\"could not connect to server.Check your internet connection!!!\");\n        }\n    if(error.status!=0){\n    return throwError(\n      error.error.detail);}\n}};\n\n\n  getEventList():Observable<HttpResponse<BidEventListAPI>>{\n    \n    this.spinner.add();\n    return this.http.get<BidEventListAPI>(this.url,\n    {headers: new HttpHeaders({'Content-Type': 'application/json'}),\n    observe:'response'}).pipe(\n      \n\n     catchError(this.handleError));\n  }\n\n  addEventByAuctioneer(event:BidEvent):Observable<HttpResponse<any>>{\n\n    this.spinner.add();\n\n    if(event!=null){\n      return this.http.post(this.url+\"create/\",JSON.stringify(event),\n      {headers: new HttpHeaders({'Content-Type': 'application/json'}),\n      observe:'response'}).pipe(\n        catchError(this.handleError) );\n    }\n  }\n\n  deleteEventByAdmin(event_id:number){\n    this.spinner.add();\n\n    if(event_id!=null){\n      return this.http.delete(this.url+event_id+'/destroy/',\n      {headers: new HttpHeaders({'Content-Type': 'application/json'}),\n      observe:'response'}).pipe(catchError(this.handleError))\n    }\n\n  }\n\n  \n\n}\n","import { Injectable } from '@angular/core';\nimport {HttpClient,HttpHeaders,HttpErrorResponse, HttpResponse} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { RestApiServerService } from './rest-api-server.service';\nimport { NewUser } from '@app/classes/new-user';\nimport { SpinnerService } from './spinner.service';\n@Injectable({\n  providedIn: 'root'\n})\nexport class RegisterService {\n  \n//url string\n  private url:string;\n\n  constructor(private http:HttpClient,private restapi:RestApiServerService,private spinner:SpinnerService) {\n    this.url=restapi.path+'user/create/';\n   }\n//handle error\n   private handleError(error: HttpErrorResponse) {\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error.message);\n      return throwError('client side Error: '+error.error.message);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      console.error(\n        `Backend returned code ${error.status}, ` +\n        `body was: ${error.error.detail}, `+\n        `message was: ${error.message}` );\n    \n    // return an observable with a user-facing error message\n    if(error.status==0)\n    return throwError(\"could not connect to server.Check your internet connection!!!\");\n    else\n    return throwError(error.error.detail);\n\n}};\n\n\n  registerUser(user:NewUser):Observable<HttpResponse<NewUser>>{\n    \n    this.spinner.add();\n\n    return this.http.post<NewUser>(this.url,JSON.stringify(user),\n    {headers: new HttpHeaders({'Content-Type': 'application/json'}),\n    observe:'response'}).pipe(\n     catchError(this.handleError));\n  }\n  \n}\n","import { Injectable } from '@angular/core';\n\n@Injectable()\nexport class RestApiServerService {\n\npublic path=\"https://bid-app-project.herokuapp.com/\";\n\n  constructor() { }\n}\n","import { Injectable } from '@angular/core';\nimport { BidEvent } from '@app/classes/bid-event';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShareEventService {\n\n  //behavior subject storing events array\nprivate shareEvents=new BehaviorSubject<BidEvent[]>([]);\n  \n\n  constructor() { \n  }\n\n  //function for setting ...\n  setShareEvents(events:BidEvent[]){\n    \n    this.shareEvents.next(events);\n    \n  }\n  //function for receiving event array\n  getShareEvents(){\n    return this.shareEvents.asObservable();\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { AuthService } from '@app/services/auth.service';\nimport {User} from '@app/classes/user';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { Profile } from '@app/classes/profile';\nimport { ProfileImage } from '@app/classes/profile-image';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShareUserService {\n  //behavior subject for storing complete user profile\nprivate shareUser=new BehaviorSubject<User>(new User(new Profile()));\n\n/* stores user profile image */\nprivate profileImage=new BehaviorSubject<ProfileImage>(new ProfileImage());\n  constructor() {\n    \n   }\n\n\ngetUser():Observable<User>{\nreturn this.shareUser.asObservable();\n}\n\ngetProfileImage():Observable<ProfileImage>{\nreturn this.profileImage.asObservable();\n}\n\nsetUser(user:User){\n  this.shareUser.next(user);\n}\n\nsetProfileImage(profileImage:ProfileImage){\n\n  this.profileImage.next(profileImage);\n}\n\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable()\nexport class SpinnerService {\n\n  public spinner=new BehaviorSubject<Boolean>(false);\n\n  constructor() { }\n\n  add(){\n\n    this.spinner.next(true);\n}\nget(){\n  return this.spinner.asObservable();\n}\n\nremove(){\n  this.spinner.next(false);\n}\n\n}","import { Injectable } from '@angular/core';\nimport { HttpResponse, HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { User } from '@app/classes/user';\nimport { catchError } from 'rxjs/operators';\nimport { RestApiServerService } from './rest-api-server.service';\nimport { ProfileImage } from '@app/classes/profile-image';\nimport { SpinnerService } from './spinner.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  private url:string;\n  constructor(private http:HttpClient,private restapi:RestApiServerService,private spinner:SpinnerService) { \n    this.url=restapi.path+'user/';\n  }\n\n\n//update user by admin\nupdateUserByAdmin(user:User):Observable<HttpResponse<User>>{\n  this.spinner.add();\n\n  if(user!=null){\n  return this.http.put<User>(this.url+user.username+'/',JSON.stringify(user),{headers: new HttpHeaders({'Content-Type': 'application/json'}),observe:'response'}).pipe(\n  catchError(this.handleError)\n)}\n}\n//update profile by user\n\n  updateProfileByUser(user:User):Observable<HttpResponse<any>>{\n    this.spinner.add();\n\n    if(user!=null){\n    return this.http.put<any>(this.url,JSON.stringify(user),\n    {headers: new HttpHeaders({'Content-Type': 'application/json'}),observe:'response'}).pipe(\n      catchError(this.handleError)\n    );\n    }\n  }\n\n\n  //on successfull deletion ,generic views return 204 with no response body\n  deleteUserByAdmin(username:string):Observable<HttpResponse<any>>{\n    this.spinner.add();\n\n    if(username!=null){\n      return this.http.delete<User>(this.url+username+'/',{headers: new HttpHeaders({'Content-Type': 'application/json'}),observe:'response'}).pipe(\n          catchError(this.handleError)\n        )\n    }\n    \n        }\n\n\n  //for admin only\n  getUserByUsername(username:string):Observable<HttpResponse<User>>{\n    this.spinner.add();\n\n    if(username!=null){\n    return this.http.get<User>(this.url+username+'/',{headers: new HttpHeaders({'Content-Type': 'application/json'}),observe:'response'}).pipe(\n      catchError(this.handleError)\n    )}\n    }\n\n    /* update profile image by user --->change contentType to match as below*/\n    updateProfileImage(formData:FormData,filename:string):Observable<HttpResponse<any>>{\n      this.spinner.add();\n\n    return this.http.post<any>(this.url+'profile/'+filename+'/',formData).pipe(\n      catchError(this.handleError)\n    )\n    }\n    /* get profile image by user */\n\n    getProfileImage():Observable<HttpResponse<ProfileImage>>{\n\n      this.spinner.add();\n      return this.http.get<ProfileImage>(this.url+'image/',{headers: new HttpHeaders({'Content-Type': 'image/*'}),observe:'response'}).pipe(\n        catchError(this.handleError)\n      );\n    }\n\n\n\n  private handleError(error: HttpErrorResponse) {\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error.message);\n      return throwError('client side Error: '+error.error.message);\n    } else {\n      console.error(\n        `Backend returned code: ${error.status}, ` +\n        `body was:${error.error.detail},`+\n        \n        `message was: ${error.message}` );\n        if(error.status==0)\n        return throwError(\"could not connect to server.Check your internet connection!!!\");\n        else{\n          console.log(\"hello\")\n        return throwError(error.error.detail);}\n        \n\n}};\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}